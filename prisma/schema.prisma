generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://amar54:amar54999@203.115.101.54:3306/rakshak"
}

model Category {
  id             Int        @id @default(autoincrement())
  name           String     @unique @db.VarChar(100)
  description    String?    @db.Text
  shiftStartTime String?    @db.VarChar(5)
  shiftEndTime   String?    @db.VarChar(5)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  employees      Employee[]

  @@map("categories")
}

model Employee {
  id               Int       @id @default(autoincrement())
  employeeSystemId String    @unique
  name             String    @db.VarChar(100)
  phoneNumber      String?   @unique @db.VarChar(15)
  categoryId       Int?
  category         Category? @relation(fields: [categoryId], references: [id])
  awsFaceId        String?   @db.VarChar(255)
  faceImageData    String?   @db.LongText
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?

  Attendance Attendance[]

  @@map("employees")
}

model Ambulance {
  id              Int               @id @default(autoincrement())
  sysServiceId    String?           @db.VarChar(150)
  type            String?           @db.VarChar(50)
  callSign        String?           @unique @db.VarChar(50)
  ambulanceNumber String?           @unique @db.VarChar(50)
  zone            String?           @db.VarChar(50)
  location        String?           @db.VarChar(100)
  mdtMobileNumber String?           @unique @db.VarChar(20)
  devices         AmbulanceDevice[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  currentLogs     AmbulanceLog[]    @relation("CurrentAmbulance")
  lastLogs        AmbulanceLog[]    @relation("LastAmbulance")

  Attendance       Attendance[]
  AmbulanceFuelLog AmbulanceFuelLog[]

  @@map("ambulances")
}

model AmbulanceDevice {
  id                Int            @id @default(autoincrement())
  ambulanceId       Int?
  ambulance         Ambulance?     @relation(fields: [ambulanceId], references: [id])
  imei              String         @unique @db.VarChar(50)
  username          String         @unique @db.VarChar(255)
  password          String         @db.Text
  androidDeviceId   String?        @db.VarChar(255)
  manufacturer      String?        @db.VarChar(255)
  deviceModelName   String?        @db.VarChar(255)
  deviceToken       String?        @db.Text
  deviceLoginAt     DateTime?
  currentAppVersion String         @default("0")
  latestAppVersion  String         @default("0")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  AmbulanceLog      AmbulanceLog[]

  @@map("ambulanceDevices")
}

model AmbulanceLog {
  id                      Int              @id @default(autoincrement())
  ambulanceId             Int?
  lastAssignedAmbulanceId Int?
  deviceId                Int?
  assignedAt              DateTime?        @default(now())
  unassignedAt            DateTime
  reason                  String?          @db.Text
  createdAt               DateTime?
  updatedAt               DateTime?
  ambulance               Ambulance?       @relation("CurrentAmbulance", fields: [ambulanceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  lastAssignedAmbulance   Ambulance?       @relation("LastAmbulance", fields: [lastAssignedAmbulanceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  device                  AmbulanceDevice? @relation(fields: [deviceId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("ambulanceLogs")
}

enum DeviceMode {
  Online
  Offline
}

enum ResponseStatus {
  Success
  Failure
}

enum PunchOutType {
  manual
  auto
}

model Attendance {
  id          Int        @id @default(autoincrement())
  employee    Employee   @relation(fields: [employeeId], references: [id])
  employeeId  Int
  ambulance   Ambulance? @relation(fields: [ambulanceId], references: [id])
  ambulanceId Int?

  shiftType      String?
  punchTime      String?
  punchLocation  String?
  status         String?
  punchOutType   PunchOutType   @default(manual)
  deviceMode     DeviceMode     @default(Online)
  imageCapture   String?
  date           String?
  responseStatus ResponseStatus @default(Success)

  @@map("attendances")
}

model AmbulanceFuelLog {
  id                         Int        @id @default(autoincrement())
  ambulanceId                Int?
  ambulance                  Ambulance? @relation(fields: [ambulanceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  invoiceFileUrl             String     @db.Text
  fuelType                   String     @db.VarChar(100)
  softwareReadingLitres      String     @db.VarChar(100)
  softwareReadingUnitPrice   String     @db.VarChar(100)
  softwareReadingTotalAmount String     @db.VarChar(100)
  manualReadingLitres        String     @db.VarChar(100)
  manualReadingUnitPrice     String     @db.VarChar(100)
  manualReadingTotalAmount   String     @db.VarChar(100)
  fuelDateTime               String     @db.VarChar(100)
  location                   String     @db.VarChar(255)
  latitude                   String     @db.VarChar(255)
  longitude                  String     @db.VarChar(255)
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime?
  deletedAt                  DateTime?

  @@map("ambulancefuellogs")
}
